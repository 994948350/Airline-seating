int array_operations() {
  // what we're doing here is creating and populating a 2D array of ints.
  // We'll use the pythagoras function to store its results for every coordinate
  // pair.
  const int size = 25;
  int** array = new int*[size];
  for(int x=1; x<size; x++) { //for(int x=1; x<=size; ++x) { 
    array[x] = new int[size];
    for(int y=1; y<size; y++) {//for(int y=1; y<=size; ++y) {
      array[x][y] = 0;
    }
  }
  // sanity check
  assert(array[1][1] == 0);

  // store pythagorean numbers in the array
  for(int x=1; x<size; ++x) {  //for(int x=1; x<=size; ++x) {   
    for(int y=1; y<size; ++y) {//for(int y=1; y<=size; ++y) {
      array[x][y] = pythagoras(x, y);
    }
  }
  // do some checks
  assert(array[1][2] == -1); // no triple exists
  assert(array[3][4] == 5);
  assert(array[5][4] == 3);
  assert(array[13][12] == 5);
  assert(array[8][15] == 17);
  assert(array[8][16] != 17);
  assert(array[17][8] == 15);
  assert(array[5][3] == array[3][5]);
  assert(array[7][24] == 25);
  assert(array[12][16] == 20); // 3-4-5 triple times 4
  assert(array[5][15] == -1);
  assert(array[24][7] != -1);

  /* Now iterate over and print the array, using pointers.
     Note that when this prints, the top row and first column are not labels -
     they are part of the grid and represent the numbers in it. */
  std::cout << "Printing the Pythagorean numbers array." << std::endl;
  int** tmp_ptr = array;tmp_ptr++;//int** tmp_ptr = array;
  for(int x = 1; x < size; x++, tmp_ptr++) {//for(int x = 1; x <= size; ++x, ++tmp_ptr) {
    int* tmp_ptr2 = *tmp_ptr;tmp_ptr2++;//int* tmp_ptr2 = *tmp_ptr;
    for(int y = 1; y < size; y++, tmp_ptr2++) {//for(int y = 1; y <= size; ++y, ++tmp_ptr) {
      int tmp = *tmp_ptr2; 
      // pad single-digit numbers with a space so it looks nice
      // ain't nobody got time for <iomanip>
      std::string maybe_space = ((tmp < 10 && tmp >= 0) ? " " : "");
      std::cout << maybe_space << *tmp_ptr2 << " ";
    }
    std:: cout << std::endl;
  }

  //********************************************************************************
  // The remainder of this function has NO bugs
  // DON'T EDIT ANYTHING IN THIS FUNCTION AFTER THIS LINE
  std::cout << "Finished the array operations" << std::endl;
  int sum = 0;
  for(int x=5; x<18; ++x) {
    for(int y=3; y<10; ++y) {
      sum += array[x][y];
    }
  }
  for(int x=0; x<size; ++x) {
    delete [] array[x];
  }
  delete [] array;
  return sum;
  //********************************************************************************
}
